grammar Definition
	
	rule expression
		quantity (op_and_arg)? <ExpressionNode>
	end
	
	rule op_and_arg
		operator expression <OpArgNode>
	end
	
	rule operator
		"+" <OperatorNode> / 
		"-" <OperatorNode> / 
		"*" <OperatorNode> / 
		"/" <OperatorNode> / 
		"×" <OperatorNode> / 
		"÷" <OperatorNode>
	end
	
	rule quantity
		[\s]* value:(parenthetical / basic_quantity) [\s]* (exponentiation)? [\s]* <QuantityNode>
	end
	
	rule parenthetical
		"(" expression ")" <ParentheticalNode>
	end
	
	rule exponentiation
		operator:("^" / "**") [\s]* basic_quantity <ExponentNode>
	end
	
	rule basic_quantity
		(text / number)
	end

	rule number
		"-"? [\s]* [0-9]+ "."? [0-9]* <NumericNode>
	end
	
	rule text
		( modifier:(character+) "." )? measure:character+ <TextNode>
		#([αβγδϛϝζηθικλμνξοπϙρσςτυφχψωΓΔϚΘΛΞΠϘΣΥΦΨΩΩµa-zA-Z]+ ".")? [αβγδϛϝζηθικλμνξοπϙρσςτυφχψωΓΔϚΘΛΞΠϘΣΥΦΨΩΩµA-Za-z]+ <TextNode> # outlawing underscores. just add it to the character class to renable.
	end
	
	rule character
		[A-Za-z]/"∂"/"∆"/"α"/"β"/"γ"/"δ"/"ϛ"/"ϝ"/"ζ"/"η"/"θ"/"ι"/"κ"/"λ"/"μ"/"ν"/"ξ"/"ο"/"π"/"ϙ"/"ρ"/"σ"/"ς"/"τ"/"υ"/"φ"/"χ"/"ψ"/"ω"/"Γ"/"Δ"/'Ϛ'/'Θ'/"Λ"/"Ξ"/"Π"/"Ϙ"/"Σ"/"Υ"/"Φ"/"Ψ"/"Ω"/"Ω"/"µ"
	end

end